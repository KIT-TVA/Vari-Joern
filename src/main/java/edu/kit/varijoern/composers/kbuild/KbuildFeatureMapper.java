package edu.kit.varijoern.composers.kbuild;

import edu.kit.varijoern.composers.FeatureMapper;
import org.prop4j.Node;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Determines the presence conditions of individual code lines in a file generated by {@link KbuildComposer}.
 */
public class KbuildFeatureMapper implements FeatureMapper {
    private final Map<Path, Node> filePresenceConditions;
    private final Map<Path, GenerationInformation> generationInformation;

    /**
     * Creates a new {@link KbuildFeatureMapper} with the specified information.
     *
     * @param filePresenceConditions the presence conditions of the individual files. This list need not be complete.
     * @param generationInformation  a map from paths of generated files to information about the generation process
     */
    public KbuildFeatureMapper(Map<Path, Node> filePresenceConditions, Map<Path, GenerationInformation> generationInformation) {
        this.filePresenceConditions = filePresenceConditions;
        this.generationInformation = generationInformation;
    }

    @Override
    public Optional<Node> getPresenceCondition(Path file, int lineNumber) {
        GenerationInformation fileGenerationInformation = this.generationInformation.get(file.normalize());
        if (fileGenerationInformation == null) {
            System.err.println("Could not find generation information for file " + file.normalize());
            return Optional.empty();
        }
        Path originalPath = fileGenerationInformation.originalPath();
        Path originalPathToObjectFile = originalPath.getParent().resolve(
            originalPath.getFileName().toString().replaceAll("\\.[a-zA-Z0-9]+$", ".o")
        );
        return Optional.ofNullable(
            this.filePresenceConditions.get(
                originalPathToObjectFile.normalize()
            )
        );
    }
}
